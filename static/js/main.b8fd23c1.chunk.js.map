{"version":3,"sources":["Components/keys.js","Components/Button.js","Components/Keypad.js","App.js","serviceWorker.js","index.js"],"names":["keys","Number","Wrapper","styled","div","ButtonWrap","Button","Object","entries","map","entry","className","onTouchEnd","props","mouseup","onMouseDown","mousedown","onMouseUp","item","key","onClick","this","back","clear","Component","Textarea","textarea","Keypad","state","text","keyId","arrNo","timerId","timeStamp","Date","handleButtonPress","date","getTime","setState","handleButtonRelease","id","concat","clearTimeout","arrPos","substring","length","time","timercall","timer","toString","setTimeout","remove","timerid","len","rows","cols","readOnly","value","App","style","border","textAlign","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b8fd23c1.chunk.js","sourcesContent":["\r\nconst keys = {\r\n    \"1\": Number,\r\n    \"2\": [\"a\", \"b\", \"c\"],\r\n    \"3\": [\"d\", \"e\", \"f\"],\r\n    \"4\": [\"g\", \"h\", \"i\"],\r\n    \"5\": [\"j\", \"k\", \"l\"],\r\n    \"6\": [\"m\", \"n\", \"o\"],\r\n    \"7\": [\"p\", \"q\", \"r\", \"s\"],\r\n    \"8\": [\"t\", \"u\", \"v\"],\r\n    \"9\": [\"w\", \"x\", \"y\", \"z\"],\r\n    \"0\": Number,\r\n  };\r\n\r\n  export default keys","import React, { Component } from \"react\";\r\nimport keys from \"./keys\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  flex-wrap: wrap;\r\n  padding: 20px;\r\n`;\r\n\r\nconst ButtonWrap = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nexport default class Button extends Component {\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        {Object.entries(keys).map((entry) => (\r\n          <ButtonWrap\r\n            className=\"btn btn-primary btn-xg btn-block mx-3 my-2\"\r\n            onTouchEnd={() => {\r\n              this.props.mouseup(entry[0]);\r\n            }}\r\n            onMouseDown={this.props.mousedown}\r\n            onMouseUp={() => {\r\n              this.props.mouseup(entry[0]);\r\n            }}\r\n          >\r\n            <div>{entry.map((item) => item)}</div>\r\n          </ButtonWrap>\r\n        ))}\r\n        <ButtonWrap\r\n          className=\"btn btn-primary btn-xg btn-block  mx-3 my-2\"\r\n          key=\"10\"\r\n          onClick={this.props.back}\r\n        >\r\n          <div>back</div>\r\n        </ButtonWrap>\r\n\r\n        <ButtonWrap\r\n          className=\"btn btn-primary  btn-xg btn-block  mx-3 my-2\"\r\n          key=\"11\"\r\n          onClick={this.props.clear}\r\n        >\r\n          <div>Clear</div>\r\n        </ButtonWrap>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport keys from \"./keys\";\r\nimport Button from \"./Button\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  height: 400px;\r\n  width: 350px;\r\n  text-align: center;\r\n  margin: auto;\r\n  border: 2px red solid;\r\n  background: #ffff00;\r\n`;\r\n\r\nconst Textarea = styled.textarea`\r\n  resize: none;\r\n`;\r\n\r\nexport default class Keypad extends Component {\r\n  state = {\r\n    text: \"\" /* text displaying on screen */,\r\n    keyId: -1 /* key position */,\r\n    arrNo: 0 /* alphabet in perticular key position */,\r\n    timerId: null /*  Previous timer Running  */,\r\n    timeStamp: Date /*  time stamp of on mouse down */,\r\n  };\r\n\r\n  /*   on Mouse down event trigger this func  */\r\n  /*   Set the  */\r\n\r\n  handleButtonPress = () => {\r\n    const date = new Date().getTime();\r\n    this.setState({ timeStamp: date });\r\n  };\r\n\r\n  /*  on mouse up button to record time diffrenence */\r\n\r\n  handleButtonRelease = (id) => {\r\n    /*   condiction for 0 and 1 keys  */\r\n\r\n    if (id === \"0\" || id === \"1\") {\r\n      const { text } = this.state;\r\n      this.setState({\r\n        text: text.concat(id),\r\n        timerId: null,\r\n        date: null,\r\n        keyId: -1,\r\n      });\r\n    } else {\r\n      /*   Difference between the mouse up and mouse down    */\r\n\r\n      const currTime = new Date().getTime();\r\n      if (currTime - this.state.timeStamp < 800) {\r\n        if (this.state.timerId) {\r\n          /*  Previous timer exits */\r\n\r\n          clearTimeout(this.state.timerId);\r\n\r\n          if (id === this.state.keyId) {\r\n            /* Same Key is pressed again frequently */\r\n\r\n            let { arrNo, text } = this.state;\r\n            text = text.substring(0, text.length - 1);\r\n\r\n            let arrPos = arrNo;\r\n\r\n            /* Exception for 7 and 9 key , unless all revert back to 0 cyclically */\r\n            if (!(id === \"7\" || id === \"9\")) {\r\n              if (arrPos === 2) {\r\n                arrPos = 0;\r\n              } else {\r\n                arrPos = arrPos + 1;\r\n              }\r\n            } else {\r\n              if (arrPos === 3) {\r\n                arrPos = 0;\r\n              } else {\r\n                arrPos = arrPos + 1;\r\n              }\r\n            }\r\n\r\n            text = text.concat(keys[id][arrPos]);\r\n\r\n            const time = this.timercall();\r\n            this.setState({ timerId: time, arrNo: arrPos, text: text });\r\n          } else {\r\n            /*   Different Key is pressed frequently */\r\n            let { text } = this.state;\r\n            const time = this.timercall();\r\n            this.setState({\r\n              text: text.concat(keys[id][0]),\r\n              keyId: id,\r\n              arrNo: 0,\r\n              timerId: time,\r\n            });\r\n          }\r\n        } else {\r\n          /*   if previous timer is not there  */\r\n          const timer = this.timercall();\r\n\r\n          let { text } = this.state;\r\n          this.setState({\r\n            text: text.concat(keys[id][0]),\r\n            keyId: id,\r\n            arrNo: 0,\r\n            timerId: timer,\r\n          });\r\n        }\r\n      } else {\r\n        /*   Long press of key to show button   */\r\n        let { text } = this.state;\r\n        this.setState({\r\n          text: text.concat(id.toString()),\r\n          keyId: -1,\r\n          arrNo: 0,\r\n          timerId: null,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  /* Timer function  */\r\n\r\n  timercall = () => {\r\n    const timer = setTimeout(() => {\r\n      this.setState({ keyId: -1, arrNo: 0, timerId: null });\r\n    }, 2000);\r\n    return timer;\r\n  };\r\n\r\n  /*   To remove the rightmost alphabet on screen */\r\n  remove = () => {\r\n    clearTimeout(this.state.timerid);\r\n    let { text } = this.state;\r\n    const len = text.length;\r\n    text = text.substring(0, len - 1);\r\n    this.setState({ timerId: null, text: text });\r\n  };\r\n\r\n  /*   To clear all screen */\r\n  clear = () => {\r\n    this.setState({\r\n      text: \"\",\r\n      keyId: -1,\r\n      arrNo: 0,\r\n      timerId: null,\r\n      timeStamp: null,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    return (\r\n      <div>\r\n        <Wrapper>\r\n          <h2 className=\"mt-3\">Keypad</h2>\r\n          <Textarea rows=\"1\" cols=\"27\" className=\"mt-2\" readOnly value={text} />\r\n          <div></div>\r\n\r\n          <Button\r\n            clear={this.clear}\r\n            back={this.remove}\r\n            mousedown={this.handleButtonPress}\r\n            mouseup={(id) => {\r\n              this.handleButtonRelease(id);\r\n            }}\r\n          />\r\n        </Wrapper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport Keypad from \"./Components/Keypad\"\nfunction App() {\n  return (\n    <div className=\"App\">\n   <div style={{border:\"2px black solid\",textAlign:\"center\",width:\"100%\"}}>\n    <Keypad/>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}